import axios from 'axios';
import toast from 'react-hot-toast';

// Configura칞칚o base do axios
const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para adicionar token de autentica칞칚o
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    console.log('Token encontrado:', token ? 'Sim' : 'N칚o');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    console.log('Configura칞칚o da requisi칞칚o:', {
      url: config.url,
      method: config.method,
      headers: config.headers
    });
    return config;
  },
  (error) => {
    console.error('Erro no interceptor de requisi칞칚o:', error);
    return Promise.reject(error);
  }
);

// Interceptor para tratar respostas
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    console.error('Erro na API:', error);
    
    if (error.response) {
      const { status, data } = error.response;
      
      switch (status) {
        case 401:
          // Token expirado ou inv치lido - n칚o redirecionar se estiver na p치gina de login
          if (!window.location.pathname.includes('/login')) {
            console.log('Token inv치lido, redirecionando para login...');
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login';
            toast.error('Sess칚o expirada. Fa칞a login novamente.');
          }
          break;
        case 403:
          toast.error('Acesso negado.');
          break;
        case 404:
          toast.error('Recurso n칚o encontrado.');
          break;
        case 422:
          // Erro de valida칞칚o
          const errors = data.error?.details || data.message || 'Erro de valida칞칚o';
          toast.error(Array.isArray(errors) ? errors.join(', ') : errors);
          break;
        case 500:
          toast.error('Erro interno do servidor.');
          break;
        default:
          toast.error(data.message || 'Erro inesperado.');
      }
    } else if (error.request) {
      console.error('Erro de conex칚o:', error.request);
      toast.error('Erro de conex칚o. Verifique sua internet.');
    } else {
      console.error('Erro inesperado:', error);
      toast.error('Erro inesperado.');
    }
    
    return Promise.reject(error);
  }
);

// Servi칞os de autentica칞칚o
export const authService = {
  // Login
  login: async (email: string, password: string) => {
    const response = await api.post('/auth/login', { email, password });
    const { token, user } = response.data.data;
    
    localStorage.setItem('token', token);
    localStorage.setItem('user', JSON.stringify(user));
    
    return { data: { user } };
  },

  // Registro
  register: async (userData: {
    name: string;
    email: string;
    password: string;
    phone?: string;
  }) => {
    const response = await api.post('/auth/register', userData);
    const { token, user } = response.data.data;
    
    localStorage.setItem('token', token);
    localStorage.setItem('user', JSON.stringify(user));
    
    return { data: { user } };
  },

  // Logout
  logout: () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
  },

  // Obter usu치rio atual
  getCurrentUser: () => {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  },

  // Verificar se est치 autenticado
  isAuthenticated: () => {
    return !!localStorage.getItem('token');
  },

  // Atualizar perfil
  updateProfile: async (userData: any) => {
    const response = await api.put('/auth/me', userData);
    const { user } = response.data.data;
    
    localStorage.setItem('user', JSON.stringify(user));
    return { data: { user } };
  },

  // Alterar senha
  changePassword: async (currentPassword: string, newPassword: string) => {
    const response = await api.put('/auth/password', {
      currentPassword,
      newPassword
    });
    return response.data;
  }
};

// Servi칞os de despesas
export const expenseService = {
  // Listar despesas
  getExpenses: async (filters?: any) => {
    console.log('游니 expenseService.getExpenses - Filtros:', filters);
    console.log('游니 expenseService.getExpenses - Tipos dos filtros:', Object.entries(filters || {}).map(([key, value]) => ({ key, value, type: typeof value })));
    const response = await api.get('/expenses', { params: filters });
    console.log('游닍 expenseService.getExpenses - Resposta:', response.data);
    return response.data;
  },

  // Obter despesa por ID
  getExpense: async (id: string) => {
    console.log('游니 expenseService.getExpense - ID:', id);
    const response = await api.get(`/expenses/${id}`);
    console.log('游닍 expenseService.getExpense - Resposta:', response.data);
    return response.data;
  },

  // Criar despesa
  createExpense: async (expenseData: any) => {
    console.log('游니 expenseService.createExpense - Dados:', expenseData);
    const response = await api.post('/expenses', expenseData);
    console.log('游닍 expenseService.createExpense - Resposta:', response.data);
    return response.data;
  },

  // Atualizar despesa
  updateExpense: async (id: string, expenseData: any) => {
    console.log('游니 expenseService.updateExpense - ID:', id, 'Dados:', expenseData);
    const response = await api.put(`/expenses/${id}`, expenseData);
    console.log('游닍 expenseService.updateExpense - Resposta:', response.data);
    return response.data;
  },

  // Deletar despesa
  deleteExpense: async (id: string) => {
    const response = await api.delete(`/expenses/${id}`);
    return response.data;
  },

  // Marcar como paga
  markAsPaid: async (id: string, paidDate?: Date) => {
    const response = await api.patch(`/expenses/${id}/mark-paid`, { paidDate });
    return response.data;
  },

  // Marcar como n칚o paga
  markAsUnpaid: async (id: string) => {
    const response = await api.patch(`/expenses/${id}/mark-unpaid`);
    return response.data;
  },

  // Despesas vencidas
  getOverdueExpenses: async () => {
    const response = await api.get('/expenses/overdue');
    return response.data;
  },

  // Pr칩ximas despesas
  getUpcomingExpenses: async (days?: number) => {
    const response = await api.get('/expenses/upcoming', { params: { days } });
    return response.data;
  },

  // Estat칤sticas por per칤odo
  getStatsByPeriod: async (startDate: string, endDate: string) => {
    const response = await api.get('/expenses/stats/period', {
      params: { startDate, endDate }
    });
    return response.data;
  },

  // Estat칤sticas por categoria
  getStatsByCategory: async (startDate: string, endDate: string) => {
    const response = await api.get('/expenses/stats/category', {
      params: { startDate, endDate }
    });
    return response.data;
  },

  // Buscar despesas
  searchExpenses: async (query: string) => {
    const response = await api.get('/expenses/search', { params: { q: query } });
    return response.data;
  }
};

// Servi칞os de receitas
export const incomeService = {
  // Listar receitas
  getIncomes: async (filters?: any) => {
    const response = await api.get('/incomes', { params: filters });
    return response.data;
  },

  // Obter receita por ID
  getIncome: async (id: string) => {
    const response = await api.get(`/incomes/${id}`);
    return response.data;
  },

  // Criar receita
  createIncome: async (incomeData: any) => {
    const response = await api.post('/incomes', incomeData);
    return response.data;
  },

  // Atualizar receita
  updateIncome: async (id: string, incomeData: any) => {
    const response = await api.put(`/incomes/${id}`, incomeData);
    return response.data;
  },

  // Deletar receita
  deleteIncome: async (id: string) => {
    const response = await api.delete(`/incomes/${id}`);
    return response.data;
  },

  // Marcar como recebida
  markAsReceived: async (id: string, paymentInfo: { amount?: number; receivedDate?: string; isPartial?: boolean }) => {
    const response = await api.patch(`/incomes/${id}/mark-received`, paymentInfo);
    return response.data;
  },

  // Marcar como n칚o recebida
  markAsUnreceived: async (id: string) => {
    const response = await api.patch(`/incomes/${id}/mark-unreceived`);
    return response.data;
  }
};

// Servi칞os de categorias
export const categoryService = {
  // Listar categorias
  getCategories: async (type?: 'expense' | 'income') => {
    const response = await api.get('/categories', { params: { type } });
    return response.data;
  },

  // Criar categoria
  createCategory: async (categoryData: any) => {
    const response = await api.post('/categories', categoryData);
    return response.data;
  },

  // Atualizar categoria
  updateCategory: async (id: string, categoryData: any) => {
    const response = await api.put(`/categories/${id}`, categoryData);
    return response.data;
  },

  // Deletar categoria
  deleteCategory: async (id: string) => {
    const response = await api.delete(`/categories/${id}`);
    return response.data;
  }
};

// Servi칞os de subcategorias
export const subcategoryService = {
  // Listar subcategorias
  getSubcategories: async (categoryId?: string) => {
    const response = await api.get('/subcategories', { params: { categoryId } });
    return response.data;
  },

  // Criar subcategoria
  createSubcategory: async (subcategoryData: any) => {
    const response = await api.post('/subcategories', subcategoryData);
    return response.data;
  },

  // Atualizar subcategoria
  updateSubcategory: async (id: string, subcategoryData: any) => {
    const response = await api.put(`/subcategories/${id}`, subcategoryData);
    return response.data;
  },

  // Deletar subcategoria
  deleteSubcategory: async (id: string) => {
    const response = await api.delete(`/subcategories/${id}`);
    return response.data;
  }
};

// Servi칞os de contas banc치rias
export const bankAccountService = {
  // Listar contas banc치rias
  getBankAccounts: async () => {
    const response = await api.get('/bank-accounts');
    return response.data;
  },

  // Obter conta por ID
  getBankAccount: async (id: string) => {
    const response = await api.get(`/bank-accounts/${id}`);
    return response.data;
  },

  // Criar conta banc치ria
  createBankAccount: async (accountData: any) => {
    const response = await api.post('/bank-accounts', accountData);
    return response.data;
  },

  // Atualizar conta banc치ria
  updateBankAccount: async (id: string, accountData: any) => {
    const response = await api.put(`/bank-accounts/${id}`, accountData);
    return response.data;
  },

  // Deletar conta banc치ria
  deleteBankAccount: async (id: string) => {
    const response = await api.delete(`/bank-accounts/${id}`);
    return response.data;
  },

  // Ativar conta
  activateAccount: async (id: string) => {
    const response = await api.patch(`/bank-accounts/${id}/status`, { isActive: true });
    return response.data;
  },

  // Desativar conta
  deactivateAccount: async (id: string) => {
    const response = await api.patch(`/bank-accounts/${id}/status`, { isActive: false });
    return response.data;
  },

  // Atualizar saldo
  updateBalance: async (id: string, balance: number) => {
    const response = await api.patch(`/bank-accounts/${id}/balance`, { balance });
    return response.data;
  },

  // Obter estat칤sticas das contas
  getStats: async () => {
    const response = await api.get('/bank-accounts/stats');
    return response.data;
  }
};

// Servi칞os de cart칫es de cr칠dito
export const creditCardService = {
  // Listar cart칫es
  getCreditCards: async () => {
    const response = await api.get('/credit-cards');
    return response.data;
  },

  // Obter cart칚o por ID
  getCreditCard: async (id: string) => {
    const response = await api.get(`/credit-cards/${id}`);
    return response.data;
  },

  // Criar cart칚o
  createCreditCard: async (creditCardData: any) => {
    const response = await api.post('/credit-cards', creditCardData);
    return response.data;
  },

  // Atualizar cart칚o
  updateCreditCard: async (id: string, creditCardData: any) => {
    const response = await api.put(`/credit-cards/${id}`, creditCardData);
    return response.data;
  },

  // Deletar cart칚o
  deleteCreditCard: async (id: string) => {
    const response = await api.delete(`/credit-cards/${id}`);
    return response.data;
  },

  // Ativar cart칚o
  activateCreditCard: async (id: string) => {
    const response = await api.patch(`/credit-cards/${id}/activate`);
    return response.data;
  },

  // Desativar cart칚o
  deactivateCreditCard: async (id: string) => {
    const response = await api.patch(`/credit-cards/${id}/deactivate`);
    return response.data;
  },

  // Atualizar limite
  updateLimit: async (id: string, limit: number) => {
    const response = await api.patch(`/credit-cards/${id}/update-limit`, { limit });
    return response.data;
  },

  // Obter estat칤sticas dos cart칫es
  getStats: async () => {
    const response = await api.get('/credit-cards/stats/summary');
    return response.data;
  },

  // Obter cart칫es pr칩ximos do vencimento
  getUpcomingDue: async () => {
    const response = await api.get('/credit-cards/upcoming-due');
    return response.data;
  },

  // Obter estat칤sticas de um cart칚o espec칤fico
  getCardStats: async (id: string, startDate?: string, endDate?: string) => {
    const response = await api.get(`/credit-cards/${id}/stats`, {
      params: { startDate, endDate }
    });
    return response.data;
  },

  // Transa칞칫es
  // Listar transa칞칫es de um cart칚o
  getTransactions: async (creditCardId: string, filters?: any) => {
    const response = await api.get(`/credit-cards/${creditCardId}/transactions`, {
      params: filters
    });
    return response.data;
  },

  // Criar transa칞칚o
  createTransaction: async (creditCardId: string, transactionData: any) => {
    const response = await api.post(`/credit-cards/${creditCardId}/transactions`, transactionData);
    return response.data;
  },

  // Criar adiantamento de fatura
  createAdvancePayment: async (creditCardId: string, advanceData: any) => {
    const response = await api.post(`/credit-cards/${creditCardId}/advance-payment`, advanceData);
    return response.data;
  },

  // Criar estorno
  createRefund: async (creditCardId: string, refundData: any) => {
    const response = await api.post(`/credit-cards/${creditCardId}/refund`, refundData);
    return response.data;
  },

  // Buscar transa칞칫es com filtros avan칞ados
  searchTransactions: async (filters?: any) => {
    const response = await api.get('/credit-cards/transactions/search', {
      params: filters
    });
    return response.data;
  },

  // Buscar TODAS as despesas de cart칚o de cr칠dito (para a tela de cart칫es)
  getCreditCardExpenses: async () => {
    const response = await api.get('/expenses?includeCreditCard=true');
    return response.data;
  }
};

// Servi칞os de dashboard
export const dashboardService = {
  // Obter dados do dashboard
  getDashboardData: async (period?: string) => {
    const response = await api.get('/dashboard', { params: { period } });
    return response.data;
  },

  // Obter estat칤sticas
  getStats: async (filters?: any) => {
    const response = await api.get('/dashboard/stats', { params: filters });
    return response.data;
  }
};

// Servi칞os de usu치rio
export const userService = {
  // Obter perfil do usu치rio
  getProfile: async () => {
    const response = await api.get('/users/profile');
    return response.data;
  },

  // Atualizar perfil
  updateProfile: async (userData: any) => {
    const response = await api.put('/users/profile', userData);
    return response.data;
  },

  // Atualizar prefer칡ncias
  updatePreferences: async (preferences: any) => {
    const response = await api.put('/users/preferences', preferences);
    return response.data;
  },

  // Excluir conta
  deleteAccount: async () => {
    const response = await api.delete('/users/account');
    return response.data;
  },

  // Logout
  logout: async () => {
    const response = await api.post('/auth/logout');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    return response.data;
  }
};

// Servi칞os de metas
export const goalService = {
  // Listar metas
  getGoals: async () => {
    const response = await api.get('/goals');
    return response.data;
  },

  // Criar meta
  createGoal: async (goalData: any) => {
    const response = await api.post('/goals', goalData);
    return response.data;
  },

  // Atualizar meta
  updateGoal: async (id: string, goalData: any) => {
    const response = await api.put(`/goals/${id}`, goalData);
    return response.data;
  },

  // Deletar meta
  deleteGoal: async (id: string) => {
    const response = await api.delete(`/goals/${id}`);
    return response.data;
  },

  // Atualizar progresso
  updateProgress: async (id: string, progress: number) => {
    const response = await api.patch(`/goals/${id}/progress`, { progress });
    return response.data;
  }
};

// Servi칞os de relat칩rios
export const reportService = {
  // Obter estat칤sticas
  getStats: async (period: string) => {
    const response = await api.get('/reports/stats', { params: { period } });
    return response.data;
  },

  // Obter relat칩rios
  getReports: async () => {
    const response = await api.get('/reports');
    return response.data;
  },

  // Gerar relat칩rio
  generateReport: async (type: string, period: string) => {
    const response = await api.post('/reports/generate', { type, period });
    return response.data;
  },

  // Download relat칩rio
  downloadReport: async (id: string, format: 'pdf' | 'csv' = 'pdf') => {
    const response = await api.get(`/reports/${id}/download`, {
      params: { format },
      responseType: 'blob'
    });
    return response.data;
  }
};

// Servi칞os de busca
export const searchService = {
  // Busca global
  globalSearch: async (query: string) => {
    const response = await api.get('/search', { params: { q: query } });
    return response.data;
  }
};

export default api;
